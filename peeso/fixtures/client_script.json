[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Guarantor",
  "enabled": 0,
  "modified": "2025-06-20 13:40:31.014414",
  "module": null,
  "name": "Fetch address",
  "script": "frappe.ui.form.on(\"Guarantor\", {\r\n  address_link: function(frm) {\r\n    if (frm.doc.address_link) {\r\n      // Call ERPNext helper to get formatted HTML\r\n      frm.call({\r\n        method: \"frappe.contacts.doctype.address.address.get_address_display\",\r\n        args: { address_dict: frm.doc.address },\r\n        callback: function(r) {\r\n          // Insert the HTML into your page\r\n          if (r.message) {\r\n            frm.fields_dict.address_html.$wrapper.html(r.message);\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      // Clear if no address selected\r\n      frm.fields_dict.address_html.$wrapper.empty();\r\n    }\r\n  }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2025-06-21 15:55:08.165017",
  "module": null,
  "name": "Add loan detais",
  "script": "frappe.ui.form.on('Customer', {\r\n  refresh(frm) {\r\n    // only on saved Customers\r\n    if (!frm.is_new()) {\r\n      frm.add_custom_button(__('Loan'), () => {\r\n        // open a new Field Verification, pre‑link the customer\r\n        frappe.new_doc('Loan Details', {\r\n          customer: frm.doc.name\r\n        });\r\n      }, __('Create'));\r\n    }\r\n  }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Loan Details",
  "enabled": 1,
  "modified": "2025-06-21 14:40:37.445131",
  "module": null,
  "name": "FI Verification",
  "script": "frappe.ui.form.on('Loan Details', {\r\n  refresh(frm) {\r\n    // only on saved Customers\r\n    if (!frm.is_new()) {\r\n      frm.add_custom_button(__('Field Verification'), () => {\r\n        // open a new Field Verification, pre‑link the customer\r\n        frappe.new_doc('Field Verification', {\r\n          customer: frm.doc.name\r\n        });\r\n      }, __('Create'));\r\n    }\r\n  }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Loan Details",
  "enabled": 1,
  "modified": "2025-07-01 15:01:22.947757",
  "module": null,
  "name": "Emi calulations",
  "script": "frappe.ui.form.on('Loan Details', {\r\n    // --- existing triggers for EMI calc & duration ---\r\n    onload:       function(frm) { calculate_loan_fields(frm); },\r\n    refresh:      function(frm) { \r\n        calculate_loan_fields(frm);\r\n\r\n        // ======== BUTTONS ========\r\n        // Generate the EMI schedule\r\n        frm.add_custom_button('Generate EMI Schedule', () => generate_schedule(frm));\r\n        // Recalculate outstanding/status\r\n        frm.add_custom_button('Recalculate EMI',     () => recalc_emi(frm));\r\n    },\r\n    validate:     function(frm) { calculate_loan_fields(frm); },\r\n\r\n    loan_type:        function(frm) { calculate_loan_fields(frm); },\r\n    loan_amount:      function(frm) { calculate_loan_fields(frm); },\r\n    loan_duration:    function(frm) { calculate_loan_fields(frm); },\r\n    interest_rate:    function(frm) { calculate_loan_fields(frm); },\r\n\r\n    loan_start_date:  function(frm) { calculate_loan_duration(frm); },\r\n    loan_end_date:    function(frm) { calculate_loan_duration(frm); },\r\n});\r\n\r\n// -------------------------\r\n// BUTTON HANDLERS\r\n// -------------------------\r\n\r\n// 1) Build EMI Schedule using existing frm.doc.emi_amount, loan_duration & start_date\r\nfunction generate_schedule(frm) {\r\n    if (!frm.doc.emi_amount || !frm.doc.loan_duration || !frm.doc.loan_start_date) {\r\n        frappe.msgprint('Please make sure EMI Amount, Loan Duration & Loan Start Date are set.');\r\n        return;\r\n    }\r\n\r\n    // clear old schedule\r\n    frm.clear_table('emi_schedule');\r\n\r\n    // populate rows\r\n    for (let i = 1; i <= frm.doc.loan_duration; i++) {\r\n        let row = frm.add_child('emi_schedule');\r\n        row.installment_no     = i;\r\n        row.due_date           = frappe.datetime.add_months(frm.doc.loan_start_date, i - 1);\r\n        row.emi_amount         = frm.doc.emi_amount;\r\n        row.status             = 'Pending';\r\n        row.outstanding_amount = frm.doc.emi_amount;\r\n    }\r\n\r\n    frm.refresh_field('emi_schedule');\r\n}\r\n\r\n// 2) Recalculate outstanding_amount & status for each row\r\nfunction recalc_emi(frm) {\r\n    if (!frm.doc.emi_schedule?.length) {\r\n        frappe.msgprint('No EMI schedule found. Please Generate EMI Schedule first.');\r\n        return;\r\n    }\r\n\r\n    frm.doc.emi_schedule.forEach(row => {\r\n        let paid = parseFloat(row.amount_paid) || 0.0;\r\n        let emi  = parseFloat(row.emi_amount)   || 0.0;\r\n        let out  = frappe.utils.round(emi - paid, 2);\r\n\r\n        frappe.model.set_value(row.doctype, row.name, 'outstanding_amount', out);\r\n        frappe.model.set_value(row.doctype, row.name, 'status',\r\n            out <= 0 ? 'Paid' : 'Pending'\r\n        );\r\n    });\r\n\r\n    frm.refresh_field('emi_schedule');\r\n}\r\n\r\n// -------------------------\r\n// YOUR EXISTING FUNCTIONS\r\n// -------------------------\r\n\r\nfunction calculate_loan_fields(frm) {\r\n    var type = (frm.doc.loan_type || '').trim().toLowerCase();\r\n    var P = frm.doc.loan_amount || 0;\r\n    var n = frm.doc.loan_duration || 0;\r\n    var r_annual = frm.doc.interest_rate || 0;\r\n\r\n    if (!type || P <= 0 || n <= 0 || r_annual < 0) {\r\n        frm.set_value('emi_amount', 0);\r\n        frm.set_value('total_collection', 0);\r\n        return;\r\n    }\r\n\r\n    var emi = 0.0;\r\n    var total = 0.0;\r\n\r\n    if (type === 'flat interest') {\r\n        var total_interest = P * (r_annual / 100) * (n / 12);\r\n        total = P + total_interest;\r\n        emi = total / n;\r\n    }\r\n    else if (type === 'reducing rate interest' || type === 'reducin rate interest') {\r\n        var r = (r_annual / 100) / 12;\r\n        if (r === 0) {\r\n            emi = P / n;\r\n        } else {\r\n            emi = (P * r * Math.pow(1 + r, n)) / (Math.pow(1 + r, n) - 1);\r\n        }\r\n        total = emi * n;\r\n    }\r\n    else {\r\n        frappe.msgprint(__('Unknown Loan Type: {0}', [frm.doc.loan_type]));\r\n        frm.set_value('emi_amount', 0);\r\n        frm.set_value('total_collection', 0);\r\n        return;\r\n    }\r\n\r\n    emi = flt(emi, 2);\r\n    total = flt(total, 2);\r\n\r\n    frm.set_value('emi_amount', emi);\r\n    frm.set_value('total_collection', total);\r\n}\r\n\r\nfunction calculate_loan_duration(frm) {\r\n    if (frm.doc.loan_start_date && frm.doc.loan_end_date) {\r\n        var start = frappe.datetime.str_to_obj(frm.doc.loan_start_date);\r\n        var end = frappe.datetime.str_to_obj(frm.doc.loan_end_date);\r\n\r\n        if (start && end && end > start) {\r\n            var months = (end.getFullYear() - start.getFullYear()) * 12\r\n                       + (end.getMonth() - start.getMonth());\r\n            frm.set_value('loan_duration', months);\r\n            calculate_loan_fields(frm);\r\n        } else {\r\n            frm.set_value('loan_duration', 0);\r\n            frm.set_value('emi_amount', 0);\r\n            frm.set_value('total_collection', 0);\r\n        }\r\n    }\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Loan Details",
  "enabled": 1,
  "modified": "2025-06-24 14:17:20.424873",
  "module": null,
  "name": "create_agreement",
  "script": "frappe.ui.form.on('Loan Details', {\r\n  refresh(frm) {\r\n    // only show after the document has been saved\r\n    if (!frm.is_new()) {\r\n      frm.add_custom_button(__('Create Loan Agreement'), () => {\r\n        // build an args object containing every field from Loan Details\r\n        const args = {\r\n          loan_agreement_number: frm.doc.loan_agreement_number,\r\n          customer:              frm.doc.customer,\r\n          guarantor:             frm.doc.guarantor,\r\n          loan_purpose:          frm.doc.loan_purpose,\r\n          loan_approval_date:    frm.doc.loan_approval_date,\r\n          loan_start_date:       frm.doc.loan_start_date,\r\n          loan_end_date:         frm.doc.loan_end_date,\r\n          loan_type:             frm.doc.loan_type,\r\n          loan_amount:           frm.doc.loan_amount,\r\n          loan_duration:         frm.doc.loan_duration,\r\n          total_collection:      frm.doc.total_collection,\r\n          interest_rate:         frm.doc.interest_rate,\r\n          emi_amount:            frm.doc.emi_amount\r\n        };\r\n\r\n        // open a new Loan Agreement with all those fields set\r\n        frappe.new_doc('Loan Agreement', args);\r\n      }, __('Create'));\r\n    }\r\n  }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Loan Details",
  "enabled": 0,
  "modified": "2025-08-19 14:33:39.473245",
  "module": null,
  "name": "make Payment",
  "script": "frappe.ui.form.on('Payment Entry', {\r\n    onload: function(frm) {\r\n        // Auto-fill party from custom loan customer field\r\n        if (frm.is_new() && frm.doc.party_type === \"Customer\" \r\n            && !frm.doc.party && frm.doc.custom_loan_customer) {\r\n            frm.set_value(\"party\", frm.doc.custom_loan_customer);\r\n        }\r\n    },\r\n    \r\n    setup: function(frm) {\r\n        // Override the reference doctype query to include Loan Details\r\n        frm.set_query(\"reference_doctype\", \"references\", function () {\r\n            let doctypes = [\"Journal Entry\"];\r\n            if (frm.doc.party_type == \"Customer\") {\r\n                doctypes = [\"Sales Order\", \"Sales Invoice\", \"Journal Entry\", \"Dunning\", \"Loan Details\"];\r\n            } else if (frm.doc.party_type == \"Supplier\") {\r\n                doctypes = [\"Purchase Order\", \"Purchase Invoice\", \"Journal Entry\"];\r\n            }\r\n            return {\r\n                filters: { name: [\"in\", doctypes] },\r\n            };\r\n        });\r\n    },\r\n    \r\n    after_save: update_emi,\r\n    on_submit: update_emi\r\n});\r\n\r\n// Override the core validation function for Payment Entry Reference\r\nfrappe.ui.form.on(\"Payment Entry Reference\", {\r\n    reference_doctype: function (frm, cdt, cdn) {\r\n        var row = locals[cdt][cdn];\r\n        validate_reference_document_with_loan_details(frm, row);\r\n    }\r\n});\r\n\r\n// Custom validation function that includes Loan Details\r\nfunction validate_reference_document_with_loan_details(frm, row) {\r\n    if (!row.reference_doctype) {\r\n        return;\r\n    }\r\n\r\n    if (\r\n        frm.doc.party_type == \"Customer\" &&\r\n        ![\"Sales Order\", \"Sales Invoice\", \"Journal Entry\", \"Dunning\", \"Loan Details\"].includes(row.reference_doctype)\r\n    ) {\r\n        frappe.model.set_value(row.doctype, row.name, \"reference_doctype\", null);\r\n        frappe.msgprint(\r\n            __(\r\n                \"Row #{0}: Reference Document Type must be one of Sales Order, Sales Invoice, Journal Entry, Dunning, or Loan Details\",\r\n                [row.idx]\r\n            )\r\n        );\r\n        return false;\r\n    }\r\n\r\n    if (\r\n        frm.doc.party_type == \"Supplier\" &&\r\n        ![\"Purchase Order\", \"Purchase Invoice\", \"Journal Entry\"].includes(row.reference_doctype)\r\n    ) {\r\n        frappe.model.set_value(row.doctype, row.name, \"reference_doctype\", null);\r\n        frappe.msgprint(\r\n            __(\r\n                \"Row #{0}: Reference Document Type must be one of Purchase Order, Purchase Invoice or Journal Entry\",\r\n                [row.idx]\r\n            )\r\n        );\r\n        return false;\r\n    }\r\n}\r\n\r\n// Loan Details form events\r\nfrappe.ui.form.on('Loan Details', {\r\n    refresh: function(frm) {\r\n        // Any refresh logic for Loan Details if needed\r\n    }\r\n});\r\n\r\n// EMI Collection child table events\r\nfrappe.ui.form.on('EMI Collection', {\r\n    payment_entry: function(frm, cdt, cdn) {\r\n        const row = locals[cdt][cdn];\r\n        make_payment_entry(frm, row);\r\n    }\r\n});\r\n\r\n// Payment entry creation function\r\nfunction make_payment_entry(frm, row) {\r\n    const emi = flt(row.emi_amount);\r\n    if (emi <= 0) {\r\n        frappe.msgprint(__('Nothing to pay on this EMI.'));\r\n        return;\r\n    }\r\n\r\n    if (!frm.doc.customer) {\r\n        frappe.msgprint(__('Customer is required in Loan Details'));\r\n        return;\r\n    }\r\n\r\n    frappe.model.with_doctype('Payment Entry', () => {\r\n        let pe = frappe.model.get_new_doc('Payment Entry');\r\n\r\n        // Set header fields\r\n        frappe.model.set_value(pe.doctype, pe.name, {\r\n            company: frm.doc.company,\r\n            posting_date: row.due_date || frappe.datetime.get_today(),\r\n            payment_type: 'Receive',\r\n            party_type: 'Customer',\r\n            party: frm.doc.customer,\r\n            custom_loan_customer: frm.doc.customer,\r\n            paid_from: 'Debtors - PD',\r\n            paid_to: 'Cash - PD',\r\n            paid_amount: emi,\r\n            received_amount: emi,\r\n            mode_of_payment: 'Cash',\r\n            custom_payment_reference: row.name\r\n        });\r\n\r\n        // Add reference row using proper method\r\n        let ref = frappe.model.add_child(pe, 'references');\r\n        frappe.model.set_value(ref.doctype, ref.name, {\r\n            reference_doctype: 'Loan Details',\r\n            reference_name: frm.doc.name,\r\n            total_amount: frm.doc.total_collection || emi,\r\n            outstanding_amount: frm.doc.total_collection || emi,\r\n            allocated_amount: emi\r\n        });\r\n\r\n        frappe.set_route('Form', 'Payment Entry', pe.name);\r\n    });\r\n}\r\n\r\n// EMI status update function\r\nfunction update_emi(frm) {\r\n    if (!frm.doc.custom_payment_reference) return;\r\n    \r\n    frappe.call({\r\n        method: 'frappe.client.set_value',\r\n        args: {\r\n            doctype: 'EMI Collection',\r\n            name: frm.doc.custom_payment_reference,\r\n            fieldname: {\r\n                status: 'Paid',\r\n                custom_payment_entry: frm.doc.name\r\n            }\r\n        },\r\n        callback: function(r) {\r\n            if (!r.exc) {\r\n                frappe.show_alert({\r\n                    message: 'EMI status updated to Paid',\r\n                    indicator: 'green'\r\n                });\r\n            }\r\n        }\r\n    });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 0,
  "modified": "2025-08-19 14:33:31.874338",
  "module": null,
  "name": "add_refrence",
  "script": "frappe.ui.form.on(\"Payment Entry\", {\r\n  setup: function(frm) {\r\n    // ─── 1) Restrict the dropdown, including Loan Details ──────────────────────────\r\n    frm.set_query(\"reference_doctype\", \"references\", function() {\r\n      let doctypes = [\"Journal Entry\"];\r\n      if (frm.doc.party_type === \"Customer\") {\r\n        doctypes = [\r\n          \"Sales Order\",\r\n          \"Sales Invoice\",\r\n          \"Journal Entry\",\r\n          \"Dunning\",\r\n          \"Loan Details\"\r\n        ];\r\n      } else if (frm.doc.party_type === \"Supplier\") {\r\n        doctypes = [\r\n          \"Purchase Order\",\r\n          \"Purchase Invoice\",\r\n          \"Journal Entry\"\r\n        ];\r\n      }\r\n      return { filters: { name: [\"in\", doctypes] } };\r\n    });\r\n\r\n    // ─── 2) Override the core validation to allow Loan Details ────────────────────\r\n    frm.events.validate_reference_document = function(frm, row) {\r\n      if (!row.reference_doctype) return;\r\n\r\n      // for Customer\r\n      if (frm.doc.party_type === \"Customer\") {\r\n        const allowed = [\r\n          \"Sales Order\",\r\n          \"Sales Invoice\",\r\n          \"Journal Entry\",\r\n          \"Dunning\",\r\n          \"Loan Details\"\r\n        ];\r\n        if (!allowed.includes(row.reference_doctype)) {\r\n          frappe.model.set_value(row.doctype, row.name, \"reference_doctype\", null);\r\n          frappe.msgprint(__(\r\n            \"Row #{0}: Reference Document Type must be one of \" +\r\n            allowed.join(\", \"),\r\n            [row.idx]\r\n          ));\r\n          return false;\r\n        }\r\n      }\r\n\r\n      // for Supplier\r\n      if (frm.doc.party_type === \"Supplier\") {\r\n        const allowed = [\r\n          \"Purchase Order\",\r\n          \"Purchase Invoice\",\r\n          \"Journal Entry\"\r\n        ];\r\n        if (!allowed.includes(row.reference_doctype)) {\r\n          frappe.model.set_value(row.doctype, row.name, \"reference_doctype\", null);\r\n          frappe.msgprint(__(\r\n            \"Row #{0}: Reference Document Type must be one of \" +\r\n            allowed.join(\", \"),\r\n            [row.idx]\r\n          ));\r\n          return false;\r\n        }\r\n      }\r\n    };\r\n  }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Loan Details",
  "enabled": 0,
  "modified": "2025-08-13 13:09:49.468170",
  "module": null,
  "name": "make_payment v1",
  "script": "frappe.ui.form.on('Loan Details', {\r\n    refresh: function(frm) {\r\n        // Add custom button: \"Create Payment Entry\"\r\n        if (!frm.is_new()) {\r\n            frm.add_custom_button(__('Create Payment Entry'), function() {\r\n                make_payment_entry_from_loan(frm);\r\n            }, __('Create'));\r\n        }\r\n    }\r\n});\r\n\r\n// Function to create Payment Entry\r\nfunction make_payment_entry_from_loan(frm) {\r\n    // Get EMI amount — could be from a selected row or total\r\n    let emi = 0;\r\n    // If you want the last pending EMI, choose accordingly\r\n    let pending_row = frm.doc.emi_collection.find(r => r.status !== \"Paid\");\r\n    if (pending_row) emi = flt(pending_row.emi_amount);\r\n\r\n    if (emi <= 0) {\r\n        frappe.msgprint(__('No pending EMI to pay.'));\r\n        return;\r\n    }\r\n\r\n    if (!frm.doc.customer) {\r\n        frappe.msgprint(__('Customer is required in Loan Details.'));\r\n        return;\r\n    }\r\n\r\n    frappe.model.with_doctype('Payment Entry', () => {\r\n        let pe = frappe.model.get_new_doc('Payment Entry');\r\n\r\n        // Set header values\r\n        pe.company = frm.doc.company;\r\n        pe.posting_date = frappe.datetime.get_today();\r\n        pe.payment_type = 'Receive';\r\n        pe.party_type = 'Customer';\r\n        pe.party = frm.doc.customer;\r\n        pe.custom_loan_customer = frm.doc.customer;\r\n\r\n        pe.paid_from = 'Debtors - ' + frm.doc.company_abbr;\r\n        pe.paid_to   = 'Cash - ' + frm.doc.company_abbr;\r\n        pe.paid_amount = emi;\r\n        pe.received_amount = emi;\r\n        pe.mode_of_payment = 'Cash';\r\n\r\n        // Link EMI row for after_save update\r\n        if (pending_row) {\r\n            pe.custom_payment_reference = pending_row.name;\r\n        }\r\n\r\n        // Add \"Loan Details\" reference row\r\n        let ref = frappe.model.add_child(pe, 'references');\r\n        ref.reference_doctype = 'Loan Details';\r\n        ref.reference_name = frm.doc.name;\r\n        ref.total_amount = frm.doc.total_collection || emi;\r\n        ref.outstanding_amount = frm.doc.total_collection || emi;\r\n        ref.allocated_amount = emi;\r\n\r\n        // Navigate to the new Payment Entry form\r\n        frappe.set_route('Form', 'Payment Entry', pe.name);\r\n    });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 0,
  "modified": "2025-08-19 14:33:35.791222",
  "module": null,
  "name": "delayed_payment",
  "script": "frappe.ui.form.on('Payment Entry', {\r\n    onload: function(frm) {\r\n        // Auto-fill party from custom loan customer field\r\n        if (frm.is_new() && frm.doc.party_type === \"Customer\" \r\n            && !frm.doc.party && frm.doc.custom_loan_customer) {\r\n            frm.set_value(\"party\", frm.doc.custom_loan_customer);\r\n        }\r\n    },\r\n    \r\n    setup: function(frm) {\r\n        // Override the reference doctype query to include Loan Details\r\n        frm.set_query(\"reference_doctype\", \"references\", function () {\r\n            let doctypes = [\"Journal Entry\"];\r\n            if (frm.doc.party_type == \"Customer\") {\r\n                doctypes = [\"Sales Order\", \"Sales Invoice\", \"Journal Entry\", \"Dunning\", \"Loan Details\"];\r\n            } else if (frm.doc.party_type == \"Supplier\") {\r\n                doctypes = [\"Purchase Order\", \"Purchase Invoice\", \"Journal Entry\"];\r\n            }\r\n            return {\r\n                filters: { name: [\"in\", doctypes] },\r\n            };\r\n        });\r\n    },\r\n    \r\n    after_save: update_emi,\r\n    on_submit: update_emi\r\n});\r\n\r\n// Override the core validation function for Payment Entry Reference\r\nfrappe.ui.form.on(\"Payment Entry Reference\", {\r\n    reference_doctype: function (frm, cdt, cdn) {\r\n        var row = locals[cdt][cdn];\r\n        validate_reference_document_with_loan_details(frm, row);\r\n    }\r\n});\r\n\r\n// Custom validation function that includes Loan Details\r\nfunction validate_reference_document_with_loan_details(frm, row) {\r\n    if (!row.reference_doctype) {\r\n        return;\r\n    }\r\n\r\n    if (\r\n        frm.doc.party_type == \"Customer\" &&\r\n        ![\"Sales Order\", \"Sales Invoice\", \"Journal Entry\", \"Dunning\", \"Loan Details\"].includes(row.reference_doctype)\r\n    ) {\r\n        frappe.model.set_value(row.doctype, row.name, \"reference_doctype\", null);\r\n        frappe.msgprint(\r\n            __(\r\n                \"Row #{0}: Reference Document Type must be one of Sales Order, Sales Invoice, Journal Entry, Dunning, or Loan Details\",\r\n                [row.idx]\r\n            )\r\n        );\r\n        return false;\r\n    }\r\n\r\n    if (\r\n        frm.doc.party_type == \"Supplier\" &&\r\n        ![\"Purchase Order\", \"Purchase Invoice\", \"Journal Entry\"].includes(row.reference_doctype)\r\n    ) {\r\n        frappe.model.set_value(row.doctype, row.name, \"reference_doctype\", null);\r\n        frappe.msgprint(\r\n            __(\r\n                \"Row #{0}: Reference Document Type must be one of Purchase Order, Purchase Invoice or Journal Entry\",\r\n                [row.idx]\r\n            )\r\n        );\r\n        return false;\r\n    }\r\n}\r\n\r\n// EMI status update function\r\nfunction update_emi(frm) {\r\n    if (!frm.doc.custom_payment_reference) return;\r\n    \r\n    frappe.call({\r\n        method: 'frappe.client.set_value',\r\n        args: {\r\n            doctype: 'EMI Collection',\r\n            name: frm.doc.custom_payment_reference,\r\n            fieldname: {\r\n                status: 'Paid',\r\n                custom_payment_entry: frm.doc.name\r\n            }\r\n        },\r\n        callback: function(r) {\r\n            if (!r.exc) {\r\n                frappe.show_alert({\r\n                    message: 'EMI status updated to Paid',\r\n                    indicator: 'green'\r\n                });\r\n            }\r\n        }\r\n    });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Loan Details",
  "enabled": 1,
  "modified": "2025-08-19 14:49:44.747911",
  "module": null,
  "name": "EMI_payment",
  "script": "// Client Script targeting the CHILD DocType \"EMI Collection\"\r\nfrappe.ui.form.on('EMI Collection', {\r\n  payment_entry: function(frm, cdt, cdn) {\r\n    const row = locals[cdt][cdn];\r\n\r\n    // Cache identifiers to return and update the exact row later\r\n    const parent_doctype = frm.doc.doctype;   // \"Loan Details\"\r\n    const parent_name = frm.doc.name;         // current Loan Details name\r\n    const child_doctype = cdt;                // \"EMI Collection\"\r\n    const child_name = cdn;                   // specific child row ID\r\n\r\n    // Prefill values into new EMI Payment\r\n    frappe.route_options = {\r\n      customer: frm.doc.customer,\r\n      posting_date: row.due_date,\r\n      payment_date: row.payment_date || row.due_date,\r\n      paid_amount: row.amount_paid || row.emi_amount,\r\n      total_collection: frm.doc.total_collection\r\n    };\r\n\r\n    // Open new EMI Payment\r\n    frappe.new_doc('EMI Payment');\r\n\r\n    // After the new form loads, bind to its submit lifecycle.\r\n    // We will listen for when the new EMI Payment reaches docstatus=1 (Submitted),\r\n    // then update the source child row back in the parent document.\r\n    const unbind_on_change = frappe.router.on('change', () => {\r\n      if (cur_frm && cur_frm.doctype === 'EMI Payment' && cur_frm.doc.__islocal) {\r\n        // Bind to the form's 'submit' action\r\n        const handle_after_submit = function() {\r\n          // Only proceed if submitted\r\n          if (cur_frm.doc.docstatus !== 1) return;\r\n\r\n          const paid_amount = cur_frm.doc.paid_amount || 0;\r\n\r\n          // Load the parent doc to update the specific child row\r\n          frappe.model.with_doc(parent_doctype, parent_name, () => {\r\n            const parent_doc = frappe.model.get_doc(parent_doctype, parent_name);\r\n            const target_row = (parent_doc.emi_schedule || []).find(d => d.name === child_name);\r\n            if (target_row) {\r\n              target_row.amount_paid = flt(paid_amount);\r\n              target_row.status = \"Paid\";\r\n            }\r\n\r\n            // Save parent to persist child updates\r\n            frappe.call({\r\n              method: 'frappe.client.save',\r\n              args: {\r\n                doc: parent_doc\r\n              },\r\n              callback: function() {\r\n                // If the user navigates back to the parent, ensure it shows updated values\r\n                if (frappe.get_route()[0] === 'Form' && cur_frm && cur_frm.doctype === parent_doctype && cur_frm.doc.name === parent_name) {\r\n                  cur_frm.reload_doc();\r\n                } else {\r\n                  // Proactively refresh the parent form in background\r\n                  frappe.model.clear_doc(parent_doctype, parent_name);\r\n                }\r\n              }\r\n            });\r\n          });\r\n\r\n          // Unbind this submit handler to avoid duplicate updates\r\n          cur_frm.off('after_save', handle_after_submit);\r\n          cur_frm.off('submit', handle_after_submit);\r\n        };\r\n\r\n        // Bind to both submit and after_save for safety; only act when docstatus==1\r\n        cur_frm.on('submit', handle_after_submit);\r\n        cur_frm.on('after_save', handle_after_submit);\r\n\r\n        // Stop listening to router changes once we've attached handlers\r\n        unbind_on_change();\r\n      }\r\n    });\r\n  }\r\n});\r\n\r\n// Utility to safely parse floats\r\nfunction flt(v) {\r\n  v = v == null ? 0 : v;\r\n  const n = parseFloat(v);\r\n  return isNaN(n) ? 0 : n;\r\n}\r\n",
  "view": "Form"
 }
]